{
  "name": "ansvif",
  "tagline": "Feeds garbage arguments and data into programs trying to induce a segmentation fault.  Good for finding bugs.",
  "body": "### Intro\r\n**A Not So Very Intelligent Fuzzer**\r\n\r\nansvif, written primarily in C++, is designed to find code bugs by throwing garbage input at programs to see how they react.  This is great for finding bugs, because not every type of input is always handled, and buffers are not always checked, etc.  It also comes in handy when writing (and protecting against), buffer overflow exploitation.\r\n\r\n### Checkout and compliation\r\n\r\n```\r\n$ git clone https://github.com/oxagast/ansvif\r\n$ cd ansvif\r\n$ make\r\n$ make test\r\n```\r\n\r\nIf you would like to play with faulty.c you can compile it with \r\n\r\n```\r\n$ gcc faulty.c -o faulty\r\n```\r\n\r\n### README\r\n```\r\nCompliation:\r\n Linux:\r\n  You can compile the code with:\r\n  $ make && make test\r\n  OpenBSD:\r\n  $ make && make test\r\n  Windows:\r\n  Precompiled binaries are left in a zip file in ./bin.\r\n  Use cygwin, install g++ and gcc.\r\n  (In cygwin)\r\n  $ mv include/gzstream/gzstream.h-win include/gzstream.h\r\n  $ g++ src/common.cpp src/win/bin2hex.cpp src/match_seg.cpp src/win/main.cpp src/win/help.cpp src/win/popen2.cpp src/win/man_read.cpp src/win/sys_string.cpp -lstdc++ -std=gnu++11 -O3 -o bin/ansvif_win/ansvif.exe -lpthread\r\n  $ gcc src/win/printf.c -o bin/printf\r\n  $ cp /bin/cyggcc_s-seh-1.dll /bin/cygstdc++-6.dll /bin/cygwin1.dll bin/\r\n  Make sure cyggcc_s-seh-1.dll, cygstdc++-6.dll and cygwin1.dll are in the same directory as ansvif.exe.\r\n\r\n  If you would like to try out the example code, you can compile faulty.c with:\r\n  $ gcc faulty.c -o faulty\r\n\r\n\r\nUsing the example code:\r\n  You can point the memory back at address \\xff\\x05\\x40\\x00\\x00\\x00\\x00\\x00 (the\r\n  subroutine containing the code that spawns bash) with:\r\n  $ ./faulty -a $(perl -e 'print \"A\"x24;print \"\\x00\\xff\\x05\\x40\\x00\\x00\\x00\\x00\\x00\"')\r\n  The address may be a little different under your distro, check gdb if you really\r\n  want to try it out.  The code above /should/ drop you at a bash prompt.\r\n  If the code is set to a mode where all are able to execute as another user, it will\r\n  attempt to spawn a root shell.\r\n\r\n\r\nUseage:\r\n  Important note: Windows users will have to run ansvif.exe from Powershell for it to work!\r\n\r\n  $ ./find_suid /usr/bin/ /bin/ /sbin/\r\n  $ ./ansvif -[tm] [template/manpage] -c /path/to/executable -b buffersize\r\n\r\n  Examples:\r\n   Linux/BSD:\r\n  $ echo \"Marshall\" ./ansvif -t examples/template -c ./faulty -b 64\r\n  $ ./ansvif -m mount -c /usr/sbin/mount -e examples/template_env -x examples/template_other -f 8 -b 2048\r\n  $ ./ansvif -t examples/blank -F tmp/tmphtml -x examples/htmltags -c /usr/bin/iceweasel -b 128 -A \"file:///home/username/src/ansvif/tmp/tmphtml\"  -f 2 -n -R \"sleep 3 && killall iceweasel\" -S \">\"\r\n  Windows:\r\n  PS C:\\ansvif\\bin\\ansvif_win> .\\ansvif -t ..\\..\\examples\\space -F ..\\..\\tmp\\tmphtml -x ..\\..\\examples\\htmltags -c 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe' -b 128 -A \"file:///C:\\\\Users\\marsh\\OneDrive\\Documents\\Code\\ansvif\\tmp\\tmphtml\" -f 2 -n -S \">\" -R \"sleep 2 ; Stop-Process -Name chrome\"\r\n\r\n\r\nREADME:\r\n\r\n  -t This file should hold line by line command arguments as shown in the example file.\r\n  -e This file should hold line by line environment variables as shown in the example\r\n     file.  You can usually get these by doing something like:\r\n     $ strings /bin/mount | perl -ne 'print if /[A-Z]=$/' > mount_envs\r\n  -c Specifies the command path.\r\n  -p Specifies the manpage location (as an integer, usually 1 or 8)\r\n  -m Specifies the commands manpage.\r\n  -D Dumps whats found in the manpage.\r\n  -f Number of threads to use.  Default is 2.\r\n  -b Specifies the buffer size to fuzz with.  256-2048 Is usually sufficient.\r\n  -r Uses only random garbage data.  (note: this is buggy)\r\n  -o Writes output to log file.\r\n  -z Randomize the buffer size from 1 to what is specified by -b.\r\n  -x Other junk to put in.  Usernames and such can go here.\r\n  -S Seperator between options.\r\n  -v Verbose.\r\n  -T Timeout for threads.\r\n  -W Timeout for threads.\r\n  -L Unpriviledged user to run as if root.\r\n  -A Always put whats after this after command to run.\r\n  -B Always put whats after this before the command to run.\r\n  -F File to feed into the program that -x along with normal fuzzing data will be put in.\r\n  -n Never use random data in the fuzz.\r\n  -R Run this command after each fuzz.\r\n  -C C++ formatted regex of crash codes to detect. For example: \"(139|136)\"\r\n  -V Use Valgrind if installed.\r\n  -1 Try to make it fault once, if it doesn't happen, throw error code 64.  Useful for scripting.\r\n  -d Debug data.\r\n  -h Shows the help page.\r\n\r\nRecommendations:\r\n  DO NOT RUN THIS CODE IN A PRODUCTION ENVIRONMENT!\r\n  If you try setting faulty.c's output to suid(0) then PLEASE do it in a virtual machine.\r\n  or atleast a machine that you don't care about.\r\n  Other than that, just play around and have fun!\r\n\r\n\r\nNotes:\r\n  Windows users must have ansvif running from Powershell.  Windows code is in an experimental state.\r\n  Linux code should be relatively stable.\r\n```\r\n\r\n### Other\r\nIncluded is a file, bad_input.tar.xz.  This has some pregenerated semi-psudorandom data in it.  You can try it out by piping it to ansvif.  You may want some more specific data to be piped in, if so, create a file line by line and pipe it in.\r\n\r\n### Authors and Contributors\r\nMarshall Whittaker (@oxagast), with some help from other sources such as stackexchanges, and IRC.  Thanks!\r\n\r\n### Support or Contact\r\nYou can contact me at marshall@wtyw.net and I will try to respond in a timely manner!",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}