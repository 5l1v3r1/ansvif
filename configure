#!/bin/sh
OS=$(uname)
echo -n "Checking OS... "
if test $OS = "Linux"
then
#linux stuff
echo ${OS}
echo -n "Removing old Makefile... "
rm Makefile 2>/dev/null
echo "Done."
CFLAGS="-lstdc++ -lgzstream -lz -std=gnu++11 -lpthread -O3"
LDFLAGS="-L../include/gzstream"
CXX=g++
CC=gcc
PATH=$PATH
INCLUDES=""
elif test $OS = "OpenBSD"
then
echo -n "Removing old Makefile... "
rm Makefile 2>/dev/null
echo "Done... "
#obsd stuff
echo -n "Detecting OS... "
echo $OS
echo -n "Detecting OS Ver... "
OSVER=$(uname -r)
echo ${OSVER}
echo -n "Detecting ports gcc version... "
GCCVER=$(ls /usr/ports/pobj/ | grep gcc | tail -n 1 | sed -e 's/gcc-//')
echo ${GCCVER}
echo -n "Detecting arch... "
ARCH=$(uname -p)
if test $ARCH = "amd64"
then
PROC="x86_64"
else
PROC="x86"
fi
echo ${PROC}
CXX="/usr/ports/pobj/gcc-${GCCVER}/build-${ARCH}/gcc/xg++"
CC="/usr/ports/usr/local/bin/${PROC}-unknown-openbsd$OSVER-gcc-${GCCVER}"
PATH="$PATH:/usr/ports/pobj/gcc-${GCCVER}/build-${ARCH}/gcc:/usr/ports/pobj/gcc-${GCCVER}/bin"
CFLAGS="-lgzstream -lz -std=gnu++11 -lpthread -O3 -L./include/gzstream -lestdc++"
INCLUDES="-I/usr/ports/pobj/gcc-${GCCVER}/build-amd64/${PROC}-unknown-openbsd${OSVER}/libstdc++-v3/include -I/usr/ports/pobj/gcc-${GCCVER}/build-${ARCH}/${PROC}-unknown-openbsd${OSVER}/libstdc++-v3/include/${PROC}-unknown-openbsd${OSVER} -I/usr/ports/pobj/gcc-${GCCVER}/fake-${ARCH}/usr/local/include/c++/${GCCVER} -I/usr/ports/pobj/gcc-${GCCVER}/build-${ARCH}/gcc/include"
LDFLAGS="-L/usr/ports/pobj/gcc-${GCCVER}/build-amd64/${PROC}-unknown-openbsd${OSVER}/libstdc++-v3/include -L/usr/ports/pobj/gcc-${GCCVER}/build-${ARCH}/prev-${PROC}-unknown-openbsd${OSVER}/libstdc++-v3/src/.libs -L/usr/local/lib/gcc/${PROC}-unknown-openbsd${OSVER}/${GCCVER}"
else
echo "Sorry unsupported OS..."
fi
printf "CXX=${CXX}\n" >> Makefile
printf "CC=${CC}\n" >> Makefile
printf "CFLAGS=${CFLAGS}\n" >> Makefile
printf "LDFLAGS=${LDFLAGS}\n" >> Makefile
printf "INCLUDES=${INCLUDES}\n" >> Makefile
printf "PATH=${PATH}\n" >> Makefile
printf "all: ansvif\n" >> Makefile
printf "\n" >> Makefile
printf "default: ansvif\n" >> Makefile
printf "\n" >> Makefile
printf "ansvif:\n" >> Makefile
printf "\tcd ./include/gzstream && make && cd ../../\n" >> Makefile
printf "\tcd ./src && PATH=${PATH} ${CXX} -c common.cpp ./linux/bin2hex.cpp ./linux/popen2.cpp ./linux/main.cpp ./linux/help.cpp match_seg.cpp ./linux/sys_string.cpp ./linux/man_read.cpp ${CFLAGS} ${LDFLAGS} ${INCLUDES} -Wall\n" >> Makefile
printf "\tcd ./src && PATH=${PATH} ${CXX} *.o -o ../bin/ansvif ${CFLAGS} ${LDFLAGS} ${INCLUDES} -Wall \n" >> Makefile
printf "\tcd ./src && PATH=${PATH} ${CXX} ./linux/find_suid.cpp ${CFLAGS} ${LDFLAGS} ${INCLUDES} -O2 -o ../bin/find_suid\n" >> Makefile
printf "\n" >> Makefile
printf "test:\n" >> Makefile
printf "\t${CC} ./src/faulty.c -ansi -o ./bin/faulty\n" >> Makefile
printf "\t./bin/ansvif -c ./bin/faulty -t ./examples/mount_t.txt -b 32 -z -c ./bin/faulty\n" >> Makefile
printf "\trm ./bin/faulty\n" >> Makefile
printf "\t# Test success\n" >> Makefile
printf "\n" >> Makefile
printf "faulty : ./src/faulty.c\n" >> Makefile
printf "\t${CC} -o ./bin/faulty ./src/faulty.c\n" >> Makefile
printf "\n" >> Makefile
printf "clean:\n" >> Makefile
printf "\trm Makefile ./bin/ansvif ./bin/find_suid ./include/gzstream/*.o ./include/gzstream/*.a ./src/*.o\n" >> Makefile
echo "Configuration written.  Now type make."
